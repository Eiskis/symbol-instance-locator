var strPluginName = "Symbol Instance Locator";
var uiButtons = [];

var onRun = function(context) {
	var selection = context.selection;

	if (selection.count() == 1 && (selection[0] instanceof MSSymbolMaster || selection[0] instanceof MSSymbolInstance)) {
		var symbol = selection[0],
			symbolMaster = (symbol instanceof MSSymbolMaster) ? symbol : symbol.symbolMaster(),
			symbolInstances = [];

		var pages = context.document.pages(),
			loop = pages.objectEnumerator(),
			page;

		while (page = loop.nextObject()) {
			var predicate = NSPredicate.predicateWithFormat("className == 'MSSymbolInstance' && symbolMaster == %@",symbolMaster),
				instances = page.children().filteredArrayUsingPredicate(predicate),
				instanceLoop = instances.objectEnumerator(),
				instance;

			while (instance = instanceLoop.nextObject()) {
				symbolInstances.push(instance);
			}
		}

		if (symbolInstances.length > 0) {
			var instancePanelWidth = 350,
				instancePanelHeight = 492 + 38, // 38 is for the button panel
				instancePanelTitle = 44,
				instancePanelContentHeight = instancePanelHeight-instancePanelTitle;

			var instancePanel = NSPanel.alloc().init();
			instancePanel.setFrame_display(NSMakeRect(0,0,instancePanelWidth,instancePanelHeight),true);
			instancePanel.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask | NSFullSizeContentViewWindowMask);
			instancePanel.setBackgroundColor(NSColor.controlColor());
			instancePanel.setLevel(NSFloatingWindowLevel);
			instancePanel.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
			instancePanel.standardWindowButton(NSWindowZoomButton).setHidden(true);
			instancePanel.makeKeyAndOrderFront(null);
			instancePanel.center();
			instancePanel.title = strPluginName;

			COScript.currentCOScript().setShouldKeepAround_(true);

			var closeButton = instancePanel.standardWindowButton(NSWindowCloseButton);
			closeButton.setCOSJSTargetFunction(function(sender) {
				instancePanel.close();
				threadDictionary.removeObjectForKey(identifier);
				COScript.currentCOScript().setShouldKeepAround_(false);
			});

			var threadDictionary = NSThread.mainThread().threadDictionary(),
				identifier = "com.sonburn.sketchplugins.symbol-instance-locator";

			if (threadDictionary[identifier]) return;

			threadDictionary[identifier] = instancePanel;

			var instancePanelContent = NSView.alloc().initWithFrame(NSMakeRect(0,0,instancePanelWidth,instancePanelContentHeight));
			instancePanelContent.setFlipped(1);

			var matchText = createBoldDescription(truncateString(String(symbolMaster.name()),30) + " has " + symbolInstances.length + " instance(s).",12,NSMakeRect(8,12,instancePanelWidth-16,16));
			instancePanelContent.addSubview(matchText);

			var selectText = createDescription("Select an instance below to navigate to it's location...",12,NSMakeRect(8,34,instancePanelWidth-16,16));
			instancePanelContent.addSubview(selectText);

			var selectAllButton = NSButton.alloc().initWithFrame(NSMakeRect(0,450,130,36));
			selectAllButton.setTitle("Select All on Page");
			selectAllButton.setBezelStyle(NSRoundedBezelStyle);
			selectAllButton.setAction("callAction:");
			selectAllButton.setCOSJSTargetFunction(function(sender) {
				var scrolled = false;

				for (var i = 0; i < uiButtons.length; i++) {
					if (uiButtons[i].layer()) uiButtons[i].layer().setBorderWidth(0);
				}

				context.document.currentPage().changeSelectionBySelectingLayers(nil);

				var predicate = NSPredicate.predicateWithFormat("symbolMaster == %@",symbolMaster),
					pageInstances = context.document.currentPage().children().filteredArrayUsingPredicate(predicate),
					pageInstanceLoop = pageInstances.objectEnumerator(),
					pageInstance;

				while (pageInstance = pageInstanceLoop.nextObject()) {
					pageInstance.select_byExpandingSelection(true,true);

					var buttonToSelect = symbolInstances.findIndex(o => o == pageInstance);

					uiButtons[buttonToSelect].setWantsLayer(1);
					uiButtons[buttonToSelect].layer().setBorderWidth(2);
					uiButtons[buttonToSelect].layer().setBorderColor(CGColorCreateGenericRGB(0,0,1,1));

					if (scrolled == false) {
						instanceFrameInner.scrollPoint(NSMakePoint(0,96*buttonToSelect));
						scrolled = true;
					}
				}
			});
			instancePanelContent.addSubview(selectAllButton);

			var selectMasterButton = NSButton.alloc().initWithFrame(NSMakeRect(130,450,100,36));
			selectMasterButton.setTitle("Go to Master");
			selectMasterButton.setBezelStyle(NSRoundedBezelStyle);
			selectMasterButton.setEnabled(context.document.pages().containsObject(symbolMaster.parentPage()));
			selectMasterButton.setAction("callAction:");
			selectMasterButton.setCOSJSTargetFunction(function(sender) {
				for (var i = 0; i < uiButtons.length; i++) {
					if (uiButtons[i].layer()) uiButtons[i].layer().setBorderWidth(0);
				}

				context.document.currentPage().changeSelectionBySelectingLayers(nil);

				var rect = symbolMaster.absoluteRect().rect();

				MSDocument.currentDocument().setCurrentPage(symbolMaster.parentPage());
				MSDocument.currentDocument().currentView().zoomToFitRect(rect);

				symbolMaster.select_byExpandingSelection(true,false);
			});
			instancePanelContent.addSubview(selectMasterButton);

			// var refreshButton = NSButton.alloc().initWithFrame(NSMakeRect(230,450,120,36));
			// refreshButton.setTitle("Refresh Results");
			// refreshButton.setBezelStyle(NSRoundedBezelStyle);
			// refreshButton.setEnabled(0);
			// instancePanelContent.addSubview(refreshButton);

			var gutterWidth = 15,
				instanceItemHeight = 96,
				instanceItemWidth = instancePanelWidth - gutterWidth,
				instanceFrameInnerHeight = instanceItemHeight * (symbolInstances.length),
				instanceFrameMaxHeight = 384,
				instanceFrameHeight = (instanceFrameInnerHeight < instanceFrameMaxHeight) ? instanceFrameInnerHeight : instanceFrameMaxHeight,
				instanceFrame = NSScrollView.alloc().initWithFrame(NSMakeRect(0,64,instancePanelWidth,instanceFrameHeight)),
				instanceFrameSize = instanceFrame.contentSize(),
				instanceFrameInner = NSView.alloc().initWithFrame(NSMakeRect(0,0,instanceFrameSize.width,instanceFrameInnerHeight)),
				count = 0;

			instanceFrameInner.setFlipped(true);
			instanceFrame.setHasVerticalScroller(true);
			instanceFrame.setDocumentView(instanceFrameInner);

			for (var i = 0; i < symbolInstances.length; i++) {
				instanceFrameInner.addSubview(createListItem(symbolInstances[i],NSMakeRect(0,instanceItemHeight*count,instanceItemWidth,instanceItemHeight)));
				count++;
			}

			instancePanelContent.addSubview(instanceFrame);
			instancePanel.contentView().addSubview(instancePanelContent);
		} else {
			displayDialog(symbolMaster.name() + " has no instances.",strPluginName);
		}
	} else {
		displayDialog("Select one symbol master or instance.",strPluginName);
	}
}

function displayDialog(message,title) {
	NSApplication.sharedApplication().displayDialog_withTitle(message,title);
}

function createListItem(instance,frame) {
	var listItem = NSView.alloc().initWithFrame(frame),
		rightColWidth = 140,
		leftColWidth = frame.size.width-rightColWidth,
		leftPad = 8;

	listItem.setFlipped(1);
	listItem.addSubview(createTextLabel("Page",NSMakeRect(leftPad,6,leftColWidth,14)));
	listItem.addSubview(createTextField(instance.parentPage().name(),NSMakeRect(leftPad,18,leftColWidth-leftPad,18)));
	listItem.addSubview(createTextLabel("Artboard",NSMakeRect(leftPad,34,leftColWidth,14)));
	listItem.addSubview(createTextField((instance.parentArtboard()) ? instance.parentArtboard().name() : "None",NSMakeRect(leftPad,46,leftColWidth-leftPad,18)));
	listItem.addSubview(createTextLabel("Instance",NSMakeRect(leftPad,62,leftColWidth,14)));
	listItem.addSubview(createTextField(instance.name(),NSMakeRect(leftPad,74,leftColWidth-leftPad,18)));
	listItem.addSubview(createImageArea(instance,NSMakeRect(leftColWidth,0,rightColWidth,frame.size.height)));
	listItem.addSubview(createDivider(NSMakeRect(0,frame.size.height-1,frame.size.width,1)));
	listItem.addSubview(createTargetArea(instance,NSMakeRect(0,0,frame.size.width,frame.size.height)));

	return listItem;
}

function createTextLabel(string,frame) {
	var textLabel = NSTextField.alloc().initWithFrame(frame);

	textLabel.setStringValue(string);
	textLabel.setFont(NSFont.systemFontOfSize(9));
	textLabel.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,0.4));
	textLabel.setBezeled(0);
	textLabel.setEditable(0);

	return textLabel;
}

function createTextField(string,frame) {
	var textField = NSTextField.alloc().initWithFrame(frame);

	textField.setStringValue(string);
	textField.setFont(NSFont.systemFontOfSize(11));
	textField.setBezeled(0);
	textField.setEditable(0);
	textField.setLineBreakMode(NSLineBreakByTruncatingTail);

	return textField;
}

function createDivider(frame) {
	var divider = NSView.alloc().initWithFrame(frame);

	divider.setWantsLayer(1);
	divider.layer().setBackgroundColor(CGColorCreateGenericRGB(204/255,204/255,204/255,1.0));

	return divider;
}

function createImageArea(instance,frame) {
	var imageArea = NSButton.alloc().initWithFrame(frame);

	imageArea.setTitle("");
	imageArea.setBordered(0);
	imageArea.setWantsLayer(1);
	imageArea.layer().setBackgroundColor(CGColorCreateGenericRGB(248/255,248/255,248/255,1.0));

	var exportRequest = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName_(
		instance,
		instance.absoluteInfluenceRect(),
		false
		).firstObject();

	exportRequest.format = "png";

	var scaleX = (frame.size.width-4*2) / exportRequest.rect().size.width;
	var scaleY = (frame.size.height-4*2) / exportRequest.rect().size.height;

	exportRequest.scale = (scaleX < scaleY) ? scaleX : scaleY;

	var colorSpace = NSColorSpace.sRGBColorSpace(),
		exporter = MSExporter.exporterForRequest_colorSpace_(exportRequest,colorSpace),
		imageRep = exporter.bitmapImageRep(),
		instanceImage = NSImage.alloc().init().autorelease();

	instanceImage.addRepresentation(imageRep);

	imageArea.setImage(instanceImage);

	return imageArea;
}

function createTargetArea(instance,frame) {
	var targetArea = NSButton.alloc().initWithFrame(frame);

	uiButtons.push(targetArea);

	targetArea.addCursorRect_cursor(targetArea.frame(),NSCursor.pointingHandCursor());
	targetArea.setTransparent(1);
	targetArea.setAction("callAction:");
	targetArea.setCOSJSTargetFunction(function(sender) {
		for (var i = 0; i < uiButtons.length; i++) {
			if (uiButtons[i].layer()) uiButtons[i].layer().setBorderWidth(0);
		}

		sender.setWantsLayer(1);
		sender.layer().setBorderWidth(2);
		sender.layer().setBorderColor(CGColorCreateGenericRGB(0,0,1,1));

		var rect = (instance.parentArtboard()) ? instance.parentArtboard().rect() : instance.absoluteRect().rect();

		MSDocument.currentDocument().setCurrentPage(instance.parentPage());
		MSDocument.currentDocument().currentView().zoomToFitRect(rect);

		instance.select_byExpandingSelection(true,false);
	});

	return targetArea;
}

function createDescription(text,size,frame,alpha) {
	var label = NSTextField.alloc().initWithFrame(frame),
		alpha = (alpha) ? alpha : 1.0;

	label.setStringValue(text);
	label.setFont(NSFont.systemFontOfSize(size));
	label.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,alpha));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function createBoldDescription(text,size,frame,alpha) {
	var label = NSTextField.alloc().initWithFrame(frame),
		alpha = (alpha) ? alpha : 1.0;

	label.setStringValue(text);
	label.setFont(NSFont.boldSystemFontOfSize(size));
	label.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,alpha));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function truncateString(string,length) {
	return (string.length <= length) ? string : "…" + string.substr(string.length-length);
};

var strPluginName = "Symbol Instance Locator";

var onRun = function(context) {
	var selection = context.selection;

	if (selection.count() == 1 && (selection[0] instanceof MSSymbolMaster || selection[0] instanceof MSSymbolInstance)) {
		var symbol = selection[0],
			symbolMaster = (symbol instanceof MSSymbolMaster) ? symbol : symbol.symbolMaster(),
			symbolInstances = [];

		var pages = context.document.pages(),
			loop = pages.objectEnumerator(),
			page;

		while (page = loop.nextObject()) {
			var predicate = NSPredicate.predicateWithFormat("className == 'MSSymbolInstance' && symbolMaster == %@",symbolMaster),
				instances = page.children().filteredArrayUsingPredicate(predicate),
				instanceLoop = instances.objectEnumerator(),
				instance;

			while (instance = instanceLoop.nextObject()) {
				symbolInstances.push(instance);
			}
		}

		if (symbolInstances.length > 0) {
			var alertWindow = COSAlertWindow.new();

			alertWindow.setIcon(NSImage.alloc().initByReferencingFile(context.plugin.urlForResourceNamed("icon.png").path()));
			alertWindow.setMessageText(strPluginName);

			alertWindow.addTextLabelWithValue(symbolMaster.name() + " has " + symbolInstances.length + " instance(s).");

			alertWindow.addTextLabelWithValue("Select an instance to navigate to it's location.");

			var instanceItemHeight = 60,
				instanceItemWidth = 286,
				instanceFrameHeight = instanceItemHeight * (symbolInstances.length),
				instanceFrame = NSScrollView.alloc().initWithFrame(NSMakeRect(0,0,300,300)),
				instanceFrameSize = instanceFrame.contentSize(),
				instanceFrameInner = NSView.alloc().initWithFrame(NSMakeRect(0,0,instanceFrameSize.width,instanceFrameHeight)),
				count = 0;

			instanceFrame.setHasVerticalScroller(true);
			instanceFrameInner.setFlipped(true);
			instanceFrame.setDocumentView(instanceFrameInner);

			for (var i = 0; i < symbolInstances.length; i++) {
				instanceFrameInner.addSubview(createbutton(context,symbolInstances[i],NSMakeRect(0,instanceItemHeight*count,instanceItemWidth,instanceItemHeight)));
				count++;
			}

			instanceFrameInner.scrollPoint(NSMakePoint(0,0));

			alertWindow.addAccessoryView(instanceFrame);

			alertWindow.addButtonWithTitle("Close");

			alertWindow.runModal();
		} else {
			displayDialog(symbolMaster.name() + " has no instances.",strPluginName);
		}
	} else {
		displayDialog("Select one symbol master or instance.",strPluginName);
	}
}

function displayDialog(message,title) {
	NSApplication.sharedApplication().displayDialog_withTitle(message,title);
}

function createbutton(context,instance,frame) {
	var rightColWidth = 120,
		leftColWidth = frame.size.width-rightColWidth,
		colPad = 4;

	var view = NSView.alloc().initWithFrame(frame);
	view.setFlipped(1);

	var pageLabel = NSTextField.alloc().initWithFrame(NSMakeRect(colPad,2,leftColWidth,14));
	pageLabel.setStringValue("Page Name");
	pageLabel.setFont(NSFont.boldSystemFontOfSize(10));
	pageLabel.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,0.4));
	pageLabel.setBezeled(0);
	pageLabel.setEditable(0);
	view.addSubview(pageLabel);

	var pageText = NSTextField.alloc().initWithFrame(NSMakeRect(colPad,15,leftColWidth,18));
	pageText.setStringValue(instance.parentPage().name());
	pageText.setFont(NSFont.systemFontOfSize(11));
	pageText.setBezeled(0);
	pageText.setEditable(0);
	view.addSubview(pageText);

	var nameLabel = NSTextField.alloc().initWithFrame(NSMakeRect(colPad,29,leftColWidth,14));
	nameLabel.setStringValue("Instance Name");
	nameLabel.setFont(NSFont.boldSystemFontOfSize(10));
	nameLabel.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,0.4));
	nameLabel.setBezeled(0);
	nameLabel.setEditable(0);
	view.addSubview(nameLabel);

	var nameText = NSTextField.alloc().initWithFrame(NSMakeRect(colPad,42,leftColWidth,18));
	nameText.setStringValue(instance.name());
	nameText.setFont(NSFont.systemFontOfSize(11));
	nameText.setBezeled(0);
	nameText.setEditable(0);
	view.addSubview(nameText);

	var imageArea = NSButton.alloc().initWithFrame(NSMakeRect(leftColWidth,0,rightColWidth,60));
	imageArea.setTitle("");
	imageArea.setBordered(0);
	imageArea.setWantsLayer(1);
	imageArea.layer().setBackgroundColor(CGColorCreateGenericRGB(241/255,241/255,241/255,1.0));
	view.addSubview(imageArea);

	var exportRequest = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName_(
		instance,
		instance.absoluteInfluenceRect(),
		false
		).firstObject();

	exportRequest.format = "png";

	var scaleX = (rightColWidth-colPad*2) / exportRequest.rect().size.width;
	var scaleY = (60-colPad*2) / exportRequest.rect().size.height;

	exportRequest.scale = (scaleX < scaleY) ? scaleX : scaleY;

	var colorSpace = NSColorSpace.sRGBColorSpace(),
		exporter = MSExporter.exporterForRequest_colorSpace_(exportRequest,colorSpace),
		imageRep = exporter.bitmapImageRep(),
		instanceImage = NSImage.alloc().init().autorelease();

	instanceImage.addRepresentation(imageRep);

	imageArea.setImage(instanceImage);

	var line = NSView.alloc().initWithFrame(NSMakeRect(0,59,286,1));
	line.setWantsLayer(1);
	line.layer().setBackgroundColor(CGColorCreateGenericRGB(204/255,204/255,204/255,1.0));
	view.addSubview(line);

	var hitbox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,frame.size.width,frame.size.height));
	hitbox.setTransparent(1);
	hitbox.setAction("callAction:");
	hitbox.setCOSJSTargetFunction(function(sender) {
		NSApp.stopModalWithCode(NSOKButton);

		var rect = (instance.parentArtboard()) ? instance.parentArtboard().rect() : instance.absoluteRect().rect();

		context.document.setCurrentPage(instance.parentPage());
		context.document.currentView().zoomToFitRect(rect);

		instance.select_byExpandingSelection(true,false);
	});

	view.addSubview(hitbox);

	return view;
}
